datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String @id @default(cuid())
  email       String @unique
  role        String // "customer" | "admin"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  password    Password?
  notes       Note[]

  accessUsers AccessUser[]
  accessHubs  AccessHub[]
}

model Password {
  hash                  String
  resetPasswordHash     String?
  resetPasswordExpireAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id        String @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model AccessUser {
  id                Int         @id @default(autoincrement())
  name              String   
  description       String      @default("") 
  code              String
  activateCodeAt    DateTime?
  expireCodeAt      DateTime?
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  accessPoints      AccessPoint[]
  accessEvents      AccessEvent[]
  deletedAt         DateTime    @default("1970-01-01T00:00:00.000Z")
  // deletedAt default indicates not deleted.
  // Null not used since deletedAt needed in @@unique.

  @@unique([name, userId, deletedAt])
  @@unique([code, userId, deletedAt])
}

model AccessHub {
  id                String @id @default(cuid())
  name              String @default("Hub")
  description       String @default("") 
  heartbeatAt       DateTime?
  accessPoints      AccessPoint[] 
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  apiToken          ApiToken? 
}

model ApiToken {
  token             String @default("")

  accessHub         AccessHub @relation(fields: [accessHubId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accessHubId       String @unique
}

model AccessPoint {
  id                Int       @id @default(autoincrement())
  name              String
  description       String    @default("")
  accessUsers       AccessUser[]
  accessHub         AccessHub @relation(fields: [accessHubId], references: [id])
  accessHubId       String 
  position          Int
  accessEvents      AccessEvent[]

  @@unique([accessHubId, position])    
}

model AccessEvent {
  id                Int         @id @default(autoincrement())
  at                DateTime
  access            String      // 'grant' | 'deny'
  code              String
  accessUser        AccessUser?  @relation(fields: [accessUserId], references: [id])
  accessUserId      Int?
  accessPoint       AccessPoint @relation(fields: [accessPointId], references: [id])
  accessPointId     Int
}
